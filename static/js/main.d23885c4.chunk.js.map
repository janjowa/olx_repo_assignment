{"version":3,"sources":["ui/fysisoft_OLX_.png","comps/Home.js","comps/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomePage","className","Header","src","require","placeholder","value","type","to","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mMAAAA,EAAOC,QAAU,IAA0B,2C,8GCU5BC,MATf,WACI,OACI,yBAAKC,UAAU,eCmCRC,MApCf,WACE,OACE,yBAAKD,UAAU,yBACb,yBAAKA,UAAU,QACb,yBAAKE,IAAKC,EAAQ,OAEpB,yBAAKH,UAAU,yBACb,yBAAKA,UAAU,yBACf,2BACEA,UAAU,iBACVI,YAAY,gBACZC,MAAM,aAER,4BAAQL,UAAU,gCAEpB,yBAAKA,UAAU,mBACb,2BACEM,KAAK,OACLF,YAAY,wCACZJ,UAAU,mBAEZ,4BAAQA,UAAU,6BAEpB,yBAAKA,UAAU,oBACb,kBAAC,IAAD,CAAMO,GAAG,kBAAkBP,UAAU,aAArC,SAGA,4BAAQA,UAAU,iBAChB,yBAAKA,UAAU,kBACf,wBAAIA,UAAU,YAAd,YChBKQ,MATf,WACE,OACE,kBAAC,IAAD,KACA,kBAAC,EAAD,MACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWX,MCEbY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d23885c4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fysisoft_OLX_.667abcf8.png\";","import React from 'react';\r\nfunction HomePage(){\r\n    return(\r\n        <div className=\"home-page\">\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header fixed flex aic\">\r\n      <div className=\"logo\">\r\n        <img src={require(\"../ui/fysisoft_OLX_.png\")} />\r\n      </div>\r\n      <div className=\"location rel flex aic\">\r\n        <div className=\"icon-search ico s-24\" />\r\n        <input\r\n          className=\"label s15 font\"\r\n          placeholder=\"Your Location\"\r\n          value=\"Pakistan\"\r\n        />\r\n        <button className=\"icon-chevron-down arro s24\" />\r\n      </div>\r\n      <div className=\"search flex aic\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Find Cars, Mobile Phones and more....\"\r\n          className=\"query font s15\"\r\n        />\r\n        <button className=\"icon-search go s24 cfff\" />\r\n      </div>\r\n      <div className=\"actions flex aic\">\r\n        <Link to=\"/account/signin\" className=\"s15 fontb\">\r\n          Login\r\n        </Link>\r\n        <button className=\"sell flex aic\">\r\n          <div className=\"icon-plus s24\" />\r\n          <h2 className=\"s15 font\">Sell</h2>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\nimport \"./Props.css\";\nimport \"./App.css\";\nimport {BrowserRouter, Route, Link} from \"react-router-dom\";\nimport HomePage from './comps/Home';\nimport Header from \"./comps/Header\";\nfunction App() {\n  return (\n    <BrowserRouter>\n    <Header/>\n      <Route path=\"/\" component={HomePage}/>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}